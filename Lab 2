// Implement Stack Using Queues
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int* q1;
    int* q2;
    int front1, rear1, size1;
    int front2, rear2, size2;
    int capacity;
} MyStack;


MyStack* myStackCreate() {
    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));
    stack -> capacity = 100; 
    stack -> q1 = (int*)malloc(stack -> capacity * sizeof(int));
    stack -> q2 = (int*)malloc(stack -> capacity * sizeof(int));
    stack -> front1 = stack -> rear1 = stack -> size1 = 0;
    stack -> front2 = stack -> rear2 = stack -> size2 = 0;
    return stack;
}
// push appends the element to q1
void myStackPush(MyStack* obj, int x) {
    obj -> q1[obj -> rear1++] = x;
    obj -> size1++;
}
// pop moves all the elements except the last one to q2, pops the last element, and swaps q1 and q2
int myStackPop(MyStack* obj) {
    while(obj -> size1 > 1)
    {
        obj -> q2[obj -> rear2++] = obj -> q1[obj -> front1++];
        obj->size1--;
        obj->size2++;
    }
    int res = obj->q1[obj->front1++];
    obj->size1--;
    
    int* tempArr = obj->q1;
    obj->q1 = obj->q2;
    obj->q2 = tempArr;
    
    obj->front1 = obj->front2;
    obj->rear1 = obj->rear2;
    obj->size1 = obj->size2;
    obj->front2 = obj->rear2 = obj->size2 = 0;
    
    return res;
}
// top is similar to pop, but it re-inserts the last element back into q2 before swapping.
int myStackTop(MyStack* obj) {
    while (obj->size1 > 1) {
        obj->q2[obj->rear2++] = obj->q1[obj->front1++];
        obj->size1--;
        obj->size2++;
    }
    int res = obj->q1[obj->front1];
    obj->q2[obj->rear2++] = obj->q1[obj->front1++];
    obj->size1--;
    obj->size2++;
    
    int* tempArr = obj->q1;
    obj->q1 = obj->q2;
    obj->q2 = tempArr;
    
    obj->front1 = obj->front2;
    obj->rear1 = obj->rear2;
    obj->size1 = obj->size2;
    obj->front2 = obj->rear2 = obj->size2 = 0;
    
    return res;    
}
// empty returns whether q1 is empty
bool myStackEmpty(MyStack* obj) {
    return obj->size1 == 0;
}
// free prevents memory leaks
void myStackFree(MyStack* obj) {
    free(obj->q1);
    free(obj->q2);
    free(obj);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Implement Queue Using Stacks
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// initialize pointers and variables
typedef struct {
    int* stack1; // for pushing new elements, the main storage stack
    int* stack2; // for popping or peeking elements, the temporary stack
    int top1, top2; // track the top indexes
    int capacity; // max size of the queue
} MyQueue;

// allocates memory
MyQueue* myQueueCreate() {
    MyQueue* queue = (MyQueue*)malloc(sizeof(MyQueue));
    queue->capacity = 100; 
    queue->stack1 = (int*)malloc(queue->capacity * sizeof(int));
    queue->stack2 = (int*)malloc(queue->capacity * sizeof(int));
    queue->top1 = -1; // -1 indicates the stack is empty
    queue->top2 = -1;
    return queue;
}
// adds an element to stack1 and increments top1 to track the new top element
void myQueuePush(MyQueue* obj, int x) {
    obj->stack1[++obj->top1] = x;
}

int myQueuePop(MyQueue* obj) {
    if (obj->top2 == -1) { // if stack2 is empty
        while (obj->top1 != -1) { // move all elements from stack1 to stack2 which reverses the order
            obj->stack2[++obj->top2] = obj->stack1[obj->top1--];
        }
    }
    return obj->stack2[obj->top2--]; // pops and returns the top element of stack2
}

int myQueuePeek(MyQueue* obj) {
    if (obj->top2 == -1) { // if stack2 is empty, move elements from stack1 to stack2
        while (obj->top1 != -1) {
            obj->stack2[++obj->top2] = obj->stack1[obj->top1--];
        }
    }
    return obj->stack2[obj->top2]; // returns the top of stack2
}
// checks if both stack1 and stack2 are empty
bool myQueueEmpty(MyQueue* obj) {
    return obj->top1 == -1 && obj->top2 == -1;
}
// free allocated memory
void myQueueFree(MyQueue* obj) {
    free(obj->stack1);
    free(obj->stack2);
    free(obj);
}
// efficiently simulates a FIFO queue using two LIFO stacks

