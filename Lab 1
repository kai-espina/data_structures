// Remove Linked List Elements
struct ListNode* removeElements(struct ListNode* head, int val) {
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummy->next = head;
    
    struct ListNode* previous = dummy;
    struct ListNode* current = head;
    
    while (current) {
        if (current->val == val) {
            previous->next = current->next; // Bypass the node
            free(current); // Free memory
        } else {
            previous = current; // Move prev forward
        }
        current = previous->next; // Move curr forward
    }
    
    head = dummy->next;
    free(dummy); // Free dummy node
    return head;
}


// Reverse Linked List
struct ListNode* reverseList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* curr = head;
    struct ListNode* next = NULL;

    while (curr) {
        next = curr->next;  // Store next node
        curr->next = prev;  // Reverse current node's pointer
        prev = curr;        // Move prev forward
        curr = next;        // Move curr forward
    }

    return prev; // New head of reversed list
}
